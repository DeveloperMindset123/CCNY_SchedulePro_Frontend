generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // url      = "postgresql://ayandas:Emptycomic991!@localhost:5432/CCNY_Schedule_Pro_Backup?schema=public"
}

model User {
  id                String          @id @unique @default(uuid())
  email             String          @unique
  password          String
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  plainTextPassword String?
  refreshTokens     RefreshTokens[]
}

model RefreshTokens {
  id          String   @id @unique @default(uuid())
  hashedToken String
  userId      String
  revoked     Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  User        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserRegistrationDetails {
  userID         Int     @id @unique
  username       String  @unique
  major          String
  DOB            String?
  CollegeYear    Int
  pronouns       String?
  Hobbies        String?
  Gender         String
  emailDuplicate String  @unique
  degreeType     String
}

model RateMyProfessorData {
  id             String @id @unique @default(uuid()) // primary key
  department     String
  professorName  String
  avgDifficulty  Float
  avgRatings     Float
  wouldTakeAgain String
  numRatings     Int
  // store the comments in the comment section here
  //@see https://www.prisma.io/docs/orm/prisma-schema/data-model/relations/one-to-one-relations
  //RateMyProfessorCompleteData RateMyProfessorCompleteData?

  // one professor may have multiple comments associated with them
  RateMyProfessorComments RateMyProfessorComments[]
}

// TODO : foreign relaton model isn't fully working atm
// will simply push the data directly
model RateMyProfessorComments {
  professor_name    String
  department        String
  comments          String[]
  foreign_linker_id String //foreign key --> @unique to ensure it follows the one-to-one relation we have setup
  // for now, we will connect them manually instead
  generated_id      String               @id @unique @default(uuid())
  // fields takes in the list of foregin key
  // references takes in the key from the other table we are referencing
  // store as JSON data instead
  sentimentData     Json[]
  professorSummary  RateMyProfessorData? @relation(fields: [foreign_linker_id], references: [id])
}
