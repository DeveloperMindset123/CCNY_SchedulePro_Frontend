#![feature(trivial_bounds)]
// TODO : Define a struct named NewUser
// NOTE : NewUser struct's body should follow what's already on the existing database
// NOTE : instead of NewUser, would be best to just replace it with RegisteredUser for clarity
use serde::{Deserialize, Serialize};
// use crate::schema::*;
// use crate::schema::messaging_user::username;
// use crate::schema::messaging_user::email;
// use crate::schema::messaging_user::created_at;
// use crate::schema::users::dsl::users;
// use crate::schema::conversations::dsl::conversations;
// use crate::schema::rooms::dsl::rooms;
use diesel::prelude::*;
use chrono::NaiveDateTime;
use diesel::sql_types::{Integer, Text};

pub fn find_user_by_email() {
  unimplemented!("Not yet implemented");
}

pub fn find_user_by_uid() {
  unimplemented!("Not yet implemented");
}

pub fn get_conversation_by_room_id() {
  unimplemented!("Not yet implemented");
}

pub fn get_all_rooms() {
  unimplemented!("Not yet implemented");
}

// attach the attributes for the particular structs
#[derive(Debug, Clone, Serialize, Deserialize, QueryableByName, Selectable)]
#[diesel(table_name=crate::schema::messaging_user)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct User {   // corresponds to message_user table
  #[diesel(sql_type=Integer)]
  pub id : i32, // autogenerated

  #[diesel(sql_type=Text)]
  pub username : String,

  #[diesel(sql_type=Text)]
  pub email : String,
  pub created_at : NaiveDateTime
}

#[derive(Debug, Clone, Serialize, Deserialize, QueryableByName, Selectable)]
#[diesel(table_name=crate::schema::conversations)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct Conversation {
  #[diesel(sql_type=Integer)]
  pub id : i32,

  #[diesel(sql_type=Text)]
  pub room_id : String,

  #[diesel(sql_type=Text)]
  pub user_id : String,

  #[diesel(sql_type=Text)]
  pub message_content : String,
  pub created_at : NaiveDateTime
}

#[derive(Debug, Clone, Serialize, Deserialize, QueryableByName, Selectable)]
#[diesel(table_name=crate::schema::rooms)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct Room {
  #[diesel(sql_type=Integer)]
  pub id : i32,

  #[diesel(sql_type=Text)]
  pub name : String,
  pub last_message : String,
  pub participant_ids : String,

  pub created_at : NaiveDateTime
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct NewConversation {
  pub user_id : String,
  pub room_id : String,
  pub message : String,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct RoomResponse {
  pub room : Room,
  pub users : Vec<User>
}
